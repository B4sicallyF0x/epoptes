#!/usr/bin/env python3
# This file is part of Epoptes, http://epoptes.org
# Copyright 2010-2018 the Epoptes team, see AUTHORS.
# SPDX-License-Identifier: GPL-3.0-or-later
"""
Launch the epoptes UI.
"""
import os
import os.path
import sys

import epoptes
from epoptes.common import config, gettext as _
from epoptes.daemon import uiconnection
from epoptes.ui import gui
from gi.repository import Gtk
from twisted.internet import reactor
from twisted.internet.protocol import ClientCreator


def connection_failed(failure):
    """Errback for gui <=> daemon connection."""
    msg = _("An error occurred while trying to connect to the epoptes service:")
    msg += ' <i>' + failure.value.message + '</i>\n\n'
    print("Connection with epoptes failed:", failure.value.message)
    # Permission denied error
    if failure.value.osError == 13:
        msg += _("User %s must be a member of group %s to run epoptes.") % \
              (os.environ['USER'], config.system['SOCKET_GROUP'])
    # No such file error
    elif failure.value.osError == 2:
        msg += _("Make sure the epoptes service is running.")
    dlg = Gtk.MessageDialog(type=Gtk.MessageType.ERROR,
                            buttons=Gtk.ButtonsType.OK)
    dlg.set_markup(msg)
    dlg.set_title(_('Service connection error'))
    dlg.run()
    dlg.destroy()
    reactor.stop()


def main():
    """Usage: epoptes [--version]."""
    if len(sys.argv) > 1:
        if sys.argv[1] in ('--version', '-version'):
            print("Epoptes %s" % epoptes.__version__)
            sys.exit(0)

    # cd to the epoptes directory, so that all paths are relative
    if not os.path.isfile('remote_assistance.ui'):
        os.chdir('/usr/share/epoptes')
    path = os.path.expanduser('~/.config/epoptes/')
    if not os.path.isdir(path):
        os.makedirs(path)

    egui = gui.EpoptesGui()
    dfr = ClientCreator(reactor, uiconnection.Daemon, egui)\
        .connectUNIX(config.system['DIR'] + "/epoptes.socket")
    dfr.addErrback(connection_failed)
    reactor.run()


if __name__ == '__main__':
    main()
